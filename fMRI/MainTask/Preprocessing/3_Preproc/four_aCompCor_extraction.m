
%% extract pca components from csf and wm using aCompCor implemented in Conn, 
% 
%from CONN website; description how to use conn_module
% unsmoothed functional data
%                 Preprocessing options are specified with field name/value pairs as defined in batch.Setup.preprocessing documentation
%                    functionals       : list of functional data files { { Sub1Ses1, Sub1Ses2, ...}, {Sub2Ses1, Sub2Ses2, ...}, ...}
%                    structurals       : list of structural data files { Sub1, Sub2, ...}
%                    steps             : list of preprocessing steps (tpye
%                    "conn_module PREP steps" for a list of valid preprocessing step names)
data_path = '...\BIDS';
subj_list = [];

for subj = 1:size(subj_list,2)

     subj_id = sprintf('sub-%03d', subj_list(subj));
    
    if strcmp(subj_id,'sub-8083')==1
        struct_dir = fullfile(data_path, subj_id,'ses-002', 'anat');
    elseif strcmp(subj_id,'sub-8082')==1
        struct_dir = fullfile(data_path, subj_id,'ses-002', 'anat');
    else
        struct_dir = fullfile(data_path, subj_id,'ses-001', 'anat');
    end
    
    
    functional_data_run1 = {fullfile(data_path,subj_id,'ses-002','func',['s6war' subj_id '_ses-002_task-VMA_run-01.nii'])};
    functional_data_run2 = {fullfile(data_path,subj_id,'ses-002','func',['s6war' subj_id '_ses-002_task-VMA_run-02.nii'])};
    
    rp_file_1 = {fullfile(data_path, subj_id,'ses-002','func',['rp_' subj_id '_ses-002_task-VMA_run-01.txt'])}
    rp_file_2 = {fullfile(data_path, subj_id,'ses-002','func',['rp_' subj_id '_ses-002_task-VMA_run-02.txt'])}
    wm_im = dir([struct_dir '/' 'iwc2*'])
    wm_mask = {fullfile(wm_im.folder, wm_im.name)};
    
    csf_im = dir([struct_dir '/' 'wc3*'])
    csf_mask = {fullfile(csf_im.folder, csf_im.name)};
    
%     % run1
    conn_module('preprocessing',...
        'functionals', {functional_data_run1}, ...
        'covariates', struct(...
        'names', {{'realignment'}},...
        'files', {{rp_file_1}}),...
        'masks', struct(...
        'White', {wm_mask},...
        'CSF', {csf_mask}), ...
        'steps', {'functional_regression'}, ...
        'reg_names',{'realignment','White Matter','CSF'}, ...
        'reg_detrend' ,[0,0,0],...
        'reg_dimensions',[inf, 5, 5], ...
        'reg_skip', true, ...
        'reg_deriv', [1, 0, 0]);
    
    %run2
    clear conn_module
   conn_module('preprocessing',...
        'functionals', {functional_data_run2}, ...
        'covariates', struct(...
        'names', {{'realignment'}},...
        'files', {{rp_file_2}}),...
        'masks', struct(...
        'White', {wm_mask},...
        'CSF', {csf_mask}), ...
        'steps', {'functional_regression'}, ...
        'reg_names', {'realignment','White Matter','CSF'}, ...
        'reg_detrend' ,[0,0,0],...
        'reg_dimensions',[inf, 5, 5], ...
        'reg_skip', true, ...
        'reg_deriv', [1, 0, 0]);
    
end

